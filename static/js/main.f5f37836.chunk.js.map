{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","id","name","onClick","Section","title","children","Statistics","good","neutral","bad","total","positive","App","state","BUTTONS_NAMES","countTotalFeedback","setState","prev","countPositiveFeedbackPercentage","Math","round","toLowerCase","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAgBeA,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACX,wBAAiBC,QAAS,kBAAMJ,EAAgBG,IAAOA,KAAMA,EAA7D,SACGA,GADUD,S,MCJN,SAASG,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,6BAAKD,IACJC,K,MCLQ,SAASC,EAAT,GAA8D,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC9D,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,U,UCFAC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,SAAU,G,EAGZG,cAAgB,CACd,CAAEd,GAAI,IAAKC,KAAM,QACjB,CAAED,GAAI,IAAKC,KAAM,WACjB,CAAED,GAAI,IAAKC,KAAM,Q,EAGnBc,mBAAqB,WACnB,EAAKC,UAAS,SAAAC,GACZ,MAAO,CAAEP,MAAOO,EAAKV,KAAOU,EAAKT,QAAUS,EAAKR,S,EAIpDS,gCAAkC,WAChC,EAAKF,UAAS,SAAAC,GACZ,MAAO,CAAEN,SAAUQ,KAAKC,MAAOH,EAAKV,KAAOU,EAAKP,MAAS,U,EAI7DZ,gBAAkB,SAAAG,GAChBA,EAAOA,EAAKoB,cACZ,EAAKL,UAAS,SAAAC,GACZ,OAAO,eAAGhB,EAAOgB,EAAKhB,GAAQ,MAEhC,EAAKc,qBACL,EAAKG,mC,4CAGP,WACE,MAAgDI,KAAKT,MAA7CN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,SAEnC,OACE,gCACE,cAACR,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QAASyB,KAAKR,cACdhB,gBAAiBwB,KAAKxB,oBAG1B,cAACK,EAAD,CAASC,MAAM,aAAf,SACGG,GAAQC,GAAWC,EAClB,cAACH,EAAD,CACEC,KAAMA,EACNE,IAAKA,EACLD,QAASA,EACTE,MAAOA,EACPC,SAAUA,IAGZ,6F,GAzDMY,aAiEHX,ICpEfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f5f37836.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(({ id, name }) => (\n        <button key={id} onClick={() => onLeaveFeedback(name)} name={name}>\n          {name}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nimport './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import './Statistics.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Statistics({ good, neutral, bad, total, positive }) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positive}%</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positive: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positive: 0,\n  };\n\n  BUTTONS_NAMES = [\n    { id: '1', name: 'Good' },\n    { id: '2', name: 'Neutral' },\n    { id: '3', name: 'Bad' },\n  ];\n\n  countTotalFeedback = () => {\n    this.setState(prev => {\n      return { total: prev.good + prev.neutral + prev.bad };\n    });\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    this.setState(prev => {\n      return { positive: Math.round((prev.good / prev.total) * 100) };\n    });\n  };\n\n  onLeaveFeedback = name => {\n    name = name.toLowerCase();\n    this.setState(prev => {\n      return { [name]: prev[name] + 1 };\n    });\n    this.countTotalFeedback();\n    this.countPositiveFeedbackPercentage();\n  };\n\n  render() {\n    const { good, neutral, bad, total, positive } = this.state;\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.BUTTONS_NAMES}\n            onLeaveFeedback={this.onLeaveFeedback}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {good || neutral || bad ? (\n            <Statistics\n              good={good}\n              bad={bad}\n              neutral={neutral}\n              total={total}\n              positive={positive}\n            ></Statistics>\n          ) : (\n            <p>Nothing here yet, but you could leave your feedback</p>\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}