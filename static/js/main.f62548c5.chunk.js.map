{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["FeedbackOptions","options","onClick","map","id","name","func","Section","title","children","Statistics","good","neutral","bad","total","positive","App","useState","setGood","setNeutral","setBad","setTotal","setPositive","useEffect","Math","round","e","target","state","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAgBeA,EAZS,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAClC,OACE,mCACGD,EAAQE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,EAAaC,KAAb,OACX,wBAAiBJ,QAASA,EAASG,KAAMA,EAAzC,SACGA,GADUD,S,MCJN,SAASG,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,6BAAKD,IACJC,K,MCLQ,SAASC,EAAT,GAA8D,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,IAAKC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC9D,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,U,MCyDSC,MA3Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KACA,EAA0BH,mBAAS,GAAnC,mBAAOH,EAAP,KAAcO,EAAd,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOF,EAAP,KAAiBO,EAAjB,KA6BA,OAlBAC,qBAAU,WACRF,EAASV,EAAOC,EAAUC,GAC1BS,EAAYE,KAAKC,MAAOd,EAAOG,EAAS,QACvC,CAACD,EAAKF,EAAMC,EAASE,IAgBtB,gCACE,cAACP,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEP,QA/BQ,CACd,CAAEG,GAAI,IAAKC,KAAM,QACjB,CACED,GAAI,IACJC,KAAM,WAER,CAAED,GAAI,IAAKC,KAAM,QA0BXH,QAlBe,SAAAwB,GACrB,OAAQA,EAAEC,OAAOtB,MACf,IAAK,OACH,OAAOa,GAAQ,SAAAU,GAAK,OAAIA,EAAQ,KAClC,IAAK,UACH,OAAOT,GAAW,SAAAS,GAAK,OAAIA,EAAQ,KACrC,IAAK,MACH,OAAOR,GAAO,SAAAQ,GAAK,OAAIA,EAAQ,KACjC,QACE,aAYF,cAACrB,EAAD,CAASC,MAAM,aAAf,SACGG,GAAQC,GAAWC,EAClB,cAACH,EAAD,CACEC,KAAMA,EACNE,IAAKA,EACLD,QAASA,EACTE,MAAOA,EACPC,SAAUA,IAGZ,0FCvDVc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f62548c5.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onClick }) => {\n  return (\n    <>\n      {options.map(({ id, name, func }) => (\n        <button key={id} onClick={onClick} name={name}>\n          {name}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      func: PropTypes.func,\n    }),\n  ),\n};\n","import PropTypes from 'prop-types';\n\nimport './Section.module.css';\n\nexport default function Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n","import './Statistics.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Statistics({ good, neutral, bad, total, positive }) {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positive}%</p>\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positive: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\n\nimport './App.css';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [positive, setPositive] = useState(0);\n\n  const options = [\n    { id: '1', name: 'Good' },\n    {\n      id: '2',\n      name: 'Neutral',\n    },\n    { id: '3', name: 'Bad' },\n  ];\n\n  useEffect(() => {\n    setTotal(good + neutral + bad);\n    setPositive(Math.round((good / total) * 100));\n  }, [bad, good, neutral, total]);\n\n  const handleBtnClick = e => {\n    switch (e.target.name) {\n      case 'Good':\n        return setGood(state => state + 1);\n      case 'Neutral':\n        return setNeutral(state => state + 1);\n      case 'Bad':\n        return setBad(state => state + 1);\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onClick={handleBtnClick}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {good || neutral || bad ? (\n          <Statistics\n            good={good}\n            bad={bad}\n            neutral={neutral}\n            total={total}\n            positive={positive}\n          ></Statistics>\n        ) : (\n          <p>Nothing here yet, but you could leave your feedback</p>\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}